# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    branches:
      only:
        - develop
    docker:
      # specify the version
      - image: circleci/golang:1.8
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    working_directory: /go/src/github.com/yshkflyer/go-test-by-circleci-sample
    steps:
      - checkout

      # specify any bash command here prefixed with `run: `
      - run: go get -v -t -d ./...
      - run: go test -v ./... 2>&1 | tee -a /tmp/test_result.txt
      - run:
          name: notify failed test details
          command: |
            echo "test failed"
            cat /tmp/test_result.txt
            if [ -z "${SLACK_WEBHOOK}" ]; then
              echo "NO SLACK WEBHOOK SET"
              echo "Please input your SLACK_WEBHOOK value either in the settings for this project."
              exit 1
            else
              qt='```'
              err="${qt}$(cat /tmp/test_result.txt | sed 's/\"/\\\"/g')${qt}"
              curl -X POST -H 'Content-type: application/json' \
                --data \
                "{ \
                  \"attachments\": [ \
                    { \
                      \"text\": \"test failed\", \
                      \"color\": \"#A30100\" \
                    } \
                  ], \
                  \"blocks\": [ \
                    { \
                      \"type\": \"section\", \
                      \"text\": { \
                        \"type\": \"mrkdwn\", \
                        \"text\": \"${err}\" \
                      } \
                    } \
                  ] \
                }" ${SLACK_WEBHOOK}
            fi
          when: on_fail
